"""
Test that school sizes are being generated by school type when with_school_types is turned on and data is available.
"""

import sciris as sc
import synthpops as sp
import numpy as np
import matplotlib as mplt
import matplotlib.pyplot as plt
import cmasher as cmr
import cmocean
import pytest

mplt.rcParams['font.family'] = 'Roboto Condensed'
mplt.rcParams['font.size'] = 8


# parameters to generate a test population
pars = dict(
    n                               = 50e3,
    rand_seed                       = 123,
    max_contacts                    = None,

    country_location                = 'usa',
    state_location                  = 'Washington',
    location                        = 'seattle_metro',
    use_default                     = True,

    with_industry_code              = 0,
    with_facilities                 = 1,
    with_non_teaching_staff         = 1,  # NB: has no effect
    use_two_group_reduction         = 1,
    with_school_types               = 1,

    average_LTCF_degree             = 20,
    ltcf_staff_age_min              = 20,
    ltcf_staff_age_max              = 60,

    school_mixing_type              = {'pk-es': 'age_and_class_clustered', 'ms': 'age_and_class_clustered', 'hs': 'random', 'uv': 'random'},  # you should know what school types you're working with
    average_class_size              = 20,
    inter_grade_mixing              = 0.1,
    teacher_age_min                 = 25,
    teacher_age_max                 = 75,
    staff_age_min                   = 20,
    staff_age_max                   = 75,

    average_student_teacher_ratio   = 20,
    average_teacher_teacher_degree  = 3,
    average_student_all_staff_ratio = 15,
    average_additional_staff_degree = 20,
)


def test_school_types_created():
    """
    Test that unique school types are created.

    Returns:
        A list of the school types expected for the specified location.
    """
    sp.logger.info(f"Test that unique school types are created for each school.\nRun this first to see what school types you are working with.")

    test_pars = sc.dcp(pars)
    test_pars['n'] = 20e3
    pop = sp.make_population(**test_pars)
    if pars['with_school_types']:
        expected_school_size_distr = sp.get_school_size_distr_by_type(sp.datadir, location=pars['location'], state_location=pars['state_location'], country_location=pars['country_location'], use_default=pars['use_default'])
        expected_school_types = sorted(expected_school_size_distr.keys())

    else:
        expected_school_types = [None]

    schools_by_type = dict()
    for i, person in pop.items():
        if person['scid'] is not None:
            schools_by_type.setdefault(person['scid'], set())
            schools_by_type[person['scid']].add(person['sc_type'])

    for s, school_type in schools_by_type.items():
        assert len(school_type) == 1, f'Check failed. School {s} is listed as having more than one type.'
        schools_by_type[s] = list(school_type)[0]

    gen_school_types = sorted(set(schools_by_type.values()))
    assert gen_school_types == expected_school_types, f"Check failed. generated types: {gen_school_types}, expected: {expected_school_types}"

    print(f"School types generated for {test_pars['location']}: {set(schools_by_type.values())}")

    return list(set(schools_by_type.values()))


@pytest.mark.parametrize("pars", [pars])
def test_school_sizes_by_type(pars):
    sp.logger.info(f"Testing that school sizes are generated by school type when the parameter 'with_school_types' is set to True.")

    pop = sp.make_population(**pars)

    if pars['with_school_types']:
        expected_school_size_distr = sp.get_school_size_distr_by_type(sp.datadir, location=pars['location'], state_location=pars['state_location'], country_location=pars['country_location'], use_default=pars['use_default'])
        school_size_brackets = sp.get_school_size_brackets(sp.datadir, location=pars['location'], state_location=pars['state_location'], country_location=pars['country_location'])  # for right now the size distribution for all school types will use the same brackets or bins
    else:
        expected_school_size_distr = {None: sp.get_school_size_distr_by_brackets(sp.datadir, location=pars['location'], state_location=pars['state_location'], country_location=pars['country_location'], use_default=pars['use_default'])}
        school_size_brackets = sp.get_school_size_brackets(sp.datadir, location=pars['location'], state_location=pars['state_location'], country_location=pars['country_location'])

    bins = [school_size_brackets[0][0]] + [school_size_brackets[b][-1] + 1 for b in school_size_brackets]

    schools = dict()
    enrollment_by_school_type = {}
    gen_school_size_distr = dict()

    for i, person in pop.items():
        if person['scid'] is not None and person['sc_student']:
            schools.setdefault(person['scid'], dict())
            schools[person['scid']]['sc_type'] = person['sc_type']
            schools[person['scid']].setdefault('enrolled', 0)
            schools[person['scid']]['enrolled'] += 1

    for i, school in schools.items():
        enrollment_by_school_type.setdefault(school['sc_type'], [])
        enrollment_by_school_type[school['sc_type']].append(school['enrolled'])

    for sc_type in enrollment_by_school_type:
        sizes = enrollment_by_school_type[sc_type]
        hist, bins = np.histogram(sizes, bins=bins, density=0)
        gen_school_size_distr[sc_type] = {i: hist[i] / sum(hist) for i in school_size_brackets}
        # print(sc_type)
        # for b in gen_school_size_distr[sc_type]:
        #     if expected_school_size_distr[sc_type][b] > 0:
        #         print(f"sizes: {school_size_brackets[b][0]}-{school_size_brackets[b][-1]}, expected: {expected_school_size_distr[sc_type][b]:.3f}, generated: {gen_school_size_distr[sc_type][b]:.3f}")

    gen_school_size_distr = sc.objdict(gen_school_size_distr)

    width = 6
    height = 5 * len(gen_school_size_distr)
    hspace = 0.4

    cmap = cmr.get_sub_cmap('cmo.curl', 0.12, 1)
    fig, ax = plt.subplots(len(gen_school_size_distr), 1, figsize=(width, height), tight_layout=True)
    plt.subplots_adjust(hspace=hspace)

    bin_labels = [f"{school_size_brackets[b][0]}-{school_size_brackets[b][-1]}" for b in school_size_brackets]

    for ns, school_type, size_distr in gen_school_size_distr.enumitems():
        x = np.arange(len(school_size_brackets))

        c = ns / len(gen_school_size_distr)
        c2 = min(c + 0.1, 1)

        ax[ns].bar(x, list(expected_school_size_distr[school_type].values()), color=cmap(c), edgecolor='white', label='Expected', zorder=0)
        ax[ns].plot(x, list(gen_school_size_distr[school_type].values()), color=cmap(c2), ls='--',
                    marker='o', markerfacecolor=cmap(c2), markeredgecolor='white', markeredgewidth=.5, markersize=5, label='Simulated', zorder=1)

        leg = ax[ns].legend(loc=1)
        leg.draw_frame(False)
        ax[ns].set_xticks(x)
        ax[ns].set_xticklabels(bin_labels, rotation=25)
        ax[ns].set_xlim(0, x[-1])
        ax[ns].set_ylim(0, 1)
        ax[ns].set_title(school_type)

    plt.show()
    return pop, gen_school_size_distr.keys()


@pytest.mark.parametrize("pars", [pars])
def test_separate_school_types_for_seattle_metro(pars):
    """
    Notes:
        By default, when no location is given and use_default is set to True,
        data pulled in will be for seattle metro and school type data will
        default to previous seattle metro data with pre-k and elementary kept
        separate.
    """

    sp.logger.info("Creating schools where pre-k and elementary schools are separate.")

    test_pars = sc.dcp(pars)
    test_pars['location'] = None  # seattle_metro results with school size distribution the same for all types
    pop, school_types = test_school_sizes_by_type(test_pars)

    assert ('pk' in school_types) and ('es' in school_types), 'Check failed. pk and es school type are not separately created.'
    print('Check passed.')

    return pop


if __name__ == '__main__':

    sc.tic()
    school_types = test_school_types_created()
    pop, school_types = test_school_sizes_by_type(pars)
    pop2 = test_separate_school_types_for_seattle_metro(pars)
    sc.toc()
