"""
Test that school sizes are being generated by school type when with_school_types is turned on and data is available.
"""

import os
import sciris as sc
import synthpops as sp
import numpy as np
from collections import Counter

# parameters to generate a test population
pars = dict(
    n                               = 1000001,
    rand_seed                       = 123,
    max_contacts                    = None,

    country_location                = 'usa',
    state_location                  = 'Washington',
    location                        = 'seattle_metro',

    with_industry_code              = 0,
    with_facilities                 = 1,
    with_non_teaching_staff         = 1,  # NB: has no effect
    use_two_group_reduction         = 1,
    with_school_types               = 1,

    average_LTCF_degree             = 20,
    ltcf_staff_age_min              = 20,
    ltcf_staff_age_max              = 60,

    school_mixing_type              = 'age_clustered',
    average_class_size              = 20,
    inter_grade_mixing              = 0.1,
    teacher_age_min                 = 25,
    teacher_age_max                 = 75,
    staff_age_min                   = 20,
    staff_age_max                   = 75,

    average_student_teacher_ratio   = 20,
    average_teacher_teacher_degree  = 3,
    average_student_all_staff_ratio = 15,
    average_additional_staff_degree = 20,
)


def test_school_sizes_by_type():
    sp.logger.info(f"Testing that school sizes are generated by school type when the parameter 'with_school_types' is set to True.")

    test_pars = sc.dcp(pars)

    pop_1 = sp.make_population(**test_pars)

    expected_school_size_distr = sp.get_school_size_distr_by_type(sp.datadir, location=pars['location'], state_location=pars['state_location'], country_location=pars['country_location'])
    school_size_brackets = sp.get_school_size_brackets(sp.datadir, location=pars['location'], state_location=pars['state_location'], country_location=pars['country_location'])  # for right now the size distribution for all school types will use the same brackets or bins
    # print(school_size_brackets)
    bins = [school_size_brackets[0][0]] + [school_size_brackets[b][-1] + 1 for b in school_size_brackets]
    print(bins)

    schools = dict()
    enrollment_by_school_type = {}

    for i, person in pop_1.items():
        if person['scid'] and person['sc_student']:
            schools.setdefault(person['scid'], dict())
            schools[person['scid']]['sc_type'] = person['sc_type']
            schools[person['scid']].setdefault('enrolled', 0)
            schools[person['scid']]['enrolled'] += 1
            schools[person['scid']].setdefault('student ages', [])
            schools[person['scid']]['student ages'].append(person['age'])
    print()
    for i, school in schools.items():
        # print(f"{i} sc_type: {school['sc_type']} enrolled: {school['enrolled']} age count: {Counter(school['student ages'])}")
        enrollment_by_school_type.setdefault(school['sc_type'], [])
        enrollment_by_school_type[school['sc_type']].append(school['enrolled'])

    for sc_type in enrollment_by_school_type:
        print(sc_type, enrollment_by_school_type[sc_type])
        sizes = enrollment_by_school_type[sc_type]
        hist, bins = np.histogram(sizes, bins=bins, density=0)
        size_distr = {i: hist[i] / sum(hist) for i in school_size_brackets}
        for b in size_distr:
            if expected_school_size_distr[sc_type][b] > 0:
                print(f"sizes: {school_size_brackets[b][0]}-{school_size_brackets[b][-1]}, expected: {expected_school_size_distr[sc_type][b]:.3f}, generated: {size_distr[b]:.3f}")
        print()


if __name__ == '__main__':

    sc.tic()
    test_school_sizes_by_type()
    sc.toc()
